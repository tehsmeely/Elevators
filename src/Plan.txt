#Building and testing an elevator system.
Primarily hypothesis is that weighting lifts wait at specific locations during the day (based on predicted peak destinations) will increase efficiency




##Layers
1. Elevators. 
    Elevators respond to internal button presses and external signals. pick up people (up to a max) and unload. Real world monitors location with external signals (floor and door switches)
2. Elevator Control System (ECS). 
    Handles external symbols and the elevators. Will also factor in weighting to location
3. Usage Model.
    Model of users, turning up, waiting and going places

1&2 form the Elevator System, which could use real world external signals. The 3rd Layer is a testing model layer which replaces that for test purposes


##Details

1. Elevator

Moves to location of user ender floor(s), stopping to pick up waiting signals (if in the right direction) on the way
Once at last floor (furthest in direction of travel), signal to ECS. Will either wait till new user signal (default) or be directed to location - Signal comes from ECS. Possible case where hits endpoint and user immediately redirects to new point. will reject ECS direction if so.





2. ECS

Monitor user signals on all floors. When triggered these are broadcast to all, but remain active until a elevator consumes them directly (incase it receives the signal first but is slower to the destination). 



3. Usage Model

Realtime. Model people turning up in the morning 9am (G), going to floor of work (Random distribution 0-6). Either go out for lunch or go to cafe (and come back) then go home at 5pm


## Example Floor

6
---
5
---
4
---
3 - Cafe (Peak Lunch Time Destination)
---
2
---
1
---
G - Entrance/Exit




## Thought Scenarios


#A)
3 stationary lifts @ 0
-- User call 7 Down
    [down:{7}]
    Queue:[7d-1]
all 3 lifts head to floor 7
-- User calls down on 4, 5, then 6
    [down:{7,4,5,6}]
    Queue:[7d-1, 4d-2, 5d-3, 6d-4]
1 lift stops at 4, and user takes it down
    [down:{7,5,6}]
    Queue:[7d-1, 5d-3, 6d-4]
1 list stops at 5, and user takes it down
    [down:{7,6}]
    Queue:[7d-1, 6d]
1 list stops at 7, then down
    [down:{6}]
    Queue:[6d]

Queue:
7d, 1
4d, 2
5d, 3
6d, 4

#B)
3 stationary lifts
-- User call 5 up : [up:{5}]
all 3 lifts head to floor 7
-- User calls down on 2, 3, then 4 : [up:{5}, down:{2,3,4}]